public class ColaEnlazada<T> implements Cola<T> {
    private Nodo<T> frente;
    private Nodo<T> fin;
    private int tamano;
    
    public boolean esVacia() { return this.tamano == 0; }
    
    public void encolar(T elemento) {
        Nodo<T> nuevo = new Nodo<>(elemento);
        if (this.esVacia()) {
            this.frente = nuevo;
            this.fin = nuevo;  // Actualizar fin si vacía
        } else {
            this.fin.setSiguiente(nuevo);  // Conectar nuevo al fin actual
            this.fin = this.fin.getSiguiente();  // Actualizar fin
        }
        this.tamano++;
    }
    
    public T desencolar() throws TADException {
        if (this.esVacia()) throw new TADException("Cola vacía");
        T resultado = this.frente.getInfo();  // Obtener info del frente
        this.frente = this.frente.getSiguiente();  // Actualizar frente al siguiente
        if (this.frente == null) this.fin = null;
        this.tamano--;
        return resultado;
    }
}

public class ListaEstatica<T> implements Lista<T> {
    private T[] elementos;
    private int tamano;
    private static final int CAPACIDAD = 10;
    
    @SuppressWarnings("unchecked")
    public ListaEstatica() {
        this.elementos = (T[]) new Object[CAPACIDAD];
        this.tamano = 0;
    }
    
    public boolean esVacia() { return this.tamano == 0; }
    
    public void insertarAlInicio(T elemento) throws TADException {
        if (this.tamano == CAPACIDAD) throw new TADException("Lista llena");
        for (int i = this.tamano; i > 0; i--) {
            this.elementos[i] = this.elementos[i+1];  // Desplazar elementos hacia la derecha
        }
        this.elementos[0] = elemento;
        this.tamano++;
    }
    
    public T obtener(int indice) throws TADException {
        if (indice < 0 || indice >= this.tamano) throw new TADException("Índice inválido");
        return this.elementos[indice];  // Retornar elemento en posición
    }
    
    public void eliminar(int indice) throws TADException {
        if (indice < 0 || indice >= this.tamano) throw new TADException("Índice inválido");
        for (int i = indice; i < this.tamano - 1; i++) {
            this.elementos[i] = this.elementos[i+1];  // Desplazar elementos hacia la izquierda
        }
        this.elementos[this.tamano - 1] = null
        this.tamano--;
    }
}


